{"version":3,"file":"ant-design-draggable-modal.cjs.production.min.js","sources":["../src/DraggableModalContext.ts","../src/ResizeHandle.tsx","../src/DraggableModalInner.tsx","../src/usePrevious.ts","../src/useDrag.ts","../src/useResize.ts","../src/getWindowSize.ts","../src/clamp.ts","../src/draggableModalReducer.ts","../src/DraggableModal.tsx","../src/DraggableModalProvider.tsx"],"sourcesContent":["import * as React from 'react'\nimport { Action, ModalsState } from './draggableModalReducer'\n\nexport interface DraggableModalContextMethods {\n    dispatch: (action: Action) => void\n}\n\nexport interface DraggableModalContextValue extends DraggableModalContextMethods {\n    state: ModalsState\n}\n\nexport const DraggableModalContext = React.createContext<DraggableModalContextValue | null>(null)\n\nif (process.env.NODE_ENV !== 'production') {\n    DraggableModalContext.displayName = 'DraggableModalContext'\n}\n","import * as React from 'react'\n\nexport const ResizeHandle = (\n    props: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\n): React.ReactElement => (\n    <div className=\"ant-design-draggable-modal-resize-handle\" {...props}>\n        <div className=\"ant-design-draggable-modal-resize-handle-inner\" />\n    </div>\n)\n","import * as React from 'react'\nimport { useEffect, useMemo, useCallback, memo } from 'react'\nimport { Modal } from 'antd'\nimport { ModalProps } from 'antd/lib/modal'\nimport { ResizeHandle } from './ResizeHandle'\nimport { useDrag } from './useDrag'\nimport { DraggableModalContextMethods } from './DraggableModalContext'\nimport { usePrevious } from './usePrevious'\nimport { ModalID, ModalState } from './draggableModalReducer'\nimport { useResize } from './useResize'\n\nconst modalStyle: React.CSSProperties = { margin: 0, paddingBottom: 0, pointerEvents: 'auto' }\n\ninterface ContextProps extends DraggableModalContextMethods {\n    id: ModalID\n    modalState: ModalState\n    initialWidth?: number\n    initialHeight?: number\n}\n\nexport type DraggableModalInnerProps = ModalProps & { children?: React.ReactNode } & ContextProps\n\nfunction DraggableModalInnerNonMemo({\n    id,\n    modalState,\n    dispatch,\n    open,\n    children,\n    title,\n    initialWidth,\n    initialHeight,\n    ...otherProps\n}: DraggableModalInnerProps) {\n    // Call on mount and unmount.\n    useEffect(() => {\n        dispatch({ type: 'mount', id, intialState: { initialWidth, initialHeight } })\n        return () => dispatch({ type: 'unmount', id })\n    }, [dispatch, id, initialWidth, initialHeight])\n\n    // Bring this to the front if it's been opened with props.\n    const openPrevious = usePrevious(open)\n    useEffect(() => {\n        if (open !== openPrevious) {\n            if (open) {\n                dispatch({ type: 'show', id })\n            } else {\n                dispatch({ type: 'hide', id })\n            }\n        }\n    }, [open, openPrevious, id, dispatch])\n\n    const { zIndex, x, y, width, height } = modalState\n\n    const style: React.CSSProperties = useMemo(() => ({ ...modalStyle, top: y, left: x, height }), [\n        y,\n        x,\n        height,\n    ])\n\n    const onFocus = useCallback(() => dispatch({ type: 'focus', id }), [id, dispatch])\n\n    // @ts-ignore\n    const onDragWithID = useCallback(args => dispatch({ type: 'drag', id, ...args }), [\n        dispatch,\n        id,\n    ])\n\n    // @ts-ignore\n    const onResizeWithID = useCallback(args => dispatch({ type: 'resize', id, ...args }), [\n        dispatch,\n        id,\n    ])\n\n    const onMouseDrag = useDrag(x, y, onDragWithID)\n    const onMouseResize = useResize(x, y, width, height, onResizeWithID)\n\n    const titleElement = useMemo(\n        () => (\n            <div\n                className=\"ant-design-draggable-modal-title\"\n                onMouseDown={onMouseDrag}\n                onClick={onFocus}\n            >\n                {title}\n            </div>\n        ),\n        [onMouseDrag, onFocus, title],\n    )\n\n    return (\n        <Modal\n            wrapClassName=\"ant-design-draggable-modal\"\n            style={style}\n            width={width}\n            destroyOnClose={true}\n            mask={false}\n            maskClosable={false}\n            zIndex={zIndex}\n            title={titleElement}\n            open={open}\n            {...otherProps}\n        >\n            {children}\n            <ResizeHandle onMouseDown={onMouseResize} />\n        </Modal>\n    )\n}\n\nexport const DraggableModalInner = memo(DraggableModalInnerNonMemo)\n\nif (process.env.NODE_ENV !== 'production') {\n    DraggableModalInner.displayName = 'DraggableModalInner'\n}\n","import { useRef, useEffect } from 'react'\n\nexport const usePrevious = <T>(value: T): T => {\n    const ref = useRef<T>(value)\n    useEffect(() => {\n        ref.current = value\n    }, [value])\n    return ref.current\n}\n","import * as React from 'react'\nimport { useState, useEffect, useCallback } from 'react'\n\nexport const useDrag = (\n    x: number,\n    y: number,\n    onDrag: (args: { x: number; y: number }) => void,\n): ((e: React.MouseEvent) => void) => {\n    const [dragging, setDragging] = useState(false)\n    const [initialDragState, setInitialDragState] = useState({\n        initX: 0,\n        initY: 0,\n        mouseDownX: 0,\n        mouseDownY: 0,\n    })\n\n    const onMouseDown = useCallback(\n        (e: React.MouseEvent) => {\n            e.preventDefault()\n            setInitialDragState({\n                initX: x,\n                initY: y,\n                mouseDownX: e.clientX,\n                mouseDownY: e.clientY,\n            })\n            setDragging(true)\n        },\n        [x, y, setDragging, setInitialDragState],\n    )\n\n    useEffect(() => {\n        const onMouseMove = (e: MouseEvent): void => {\n            if (dragging) {\n                const { initX, mouseDownX, initY, mouseDownY } = initialDragState\n                let dx = e.clientX - mouseDownX\n                let dy = e.clientY - mouseDownY\n                const x = initX + dx\n                const y = initY + dy\n                onDrag({ x, y })\n            }\n        }\n        window.addEventListener('mousemove', onMouseMove, { passive: true })\n        return () => window.removeEventListener('mousemove', onMouseMove)\n    }, [initialDragState, dragging, onDrag])\n\n    useEffect(() => {\n        const onMouseUp = (): void => {\n            setDragging(false)\n        }\n        window.addEventListener('mouseup', onMouseUp)\n        return () => window.removeEventListener('mouseup', onMouseUp)\n    }, [setDragging])\n\n    return onMouseDown\n}\n","import * as React from 'react'\nimport { useState, useEffect, useCallback } from 'react'\n\ninterface InitialState {\n    initX: number\n    initY: number\n    initWidth: number\n    initHeight: number\n    mouseDownX: number\n    mouseDownY: number\n}\n\nexport const useResize = (\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    onResize: (args: { x: number; y: number; width: number; height: number }) => void,\n): ((e: React.MouseEvent) => void) => {\n    const [dragging, setDragging] = useState(false)\n    const [initialDragState, setInitialDragState] = useState<InitialState>({\n        initX: 0,\n        initY: 0,\n        initWidth: 0,\n        initHeight: 0,\n        mouseDownX: 0,\n        mouseDownY: 0,\n    })\n\n    const onMouseDown = useCallback(\n        (e: React.MouseEvent) => {\n            e.preventDefault()\n            setInitialDragState({\n                initX: x,\n                initY: y,\n                initWidth: width,\n                initHeight: height,\n                mouseDownX: e.clientX,\n                mouseDownY: e.clientY,\n            })\n            setDragging(true)\n        },\n        [width, height, setDragging, setInitialDragState, x, y],\n    )\n\n    useEffect(() => {\n        const onMouseMove = (e: MouseEvent): void => {\n            if (dragging) {\n                const {\n                    initX,\n                    initY,\n                    initWidth,\n                    mouseDownX,\n                    initHeight,\n                    mouseDownY,\n                } = initialDragState\n                let dx = e.clientX - mouseDownX\n                let dy = e.clientY - mouseDownY\n                const width = initWidth + dx\n                const height = initHeight + dy\n                return onResize({ x: initX, y: initY, width, height })\n            }\n        }\n        window.addEventListener('mousemove', onMouseMove, { passive: true })\n        return () => window.removeEventListener('mousemove', onMouseMove)\n    }, [initialDragState, dragging, onResize])\n\n    useEffect(() => {\n        const onMouseUp = (): void => {\n            setDragging(false)\n        }\n        window.addEventListener('mouseup', onMouseUp)\n        return () => window.removeEventListener('mouseup', onMouseUp)\n    }, [setDragging])\n\n    return onMouseDown\n}\n","export const getWindowSize = (): { width: number; height: number } => ({\n    width: window.innerWidth || 0,\n    height: window.innerHeight || 0,\n})\n","export const clamp = (min: number, max: number, value: number): number =>\n    Math.max(min, Math.min(max, value))\n","import { getWindowSize } from './getWindowSize'\nimport { clamp } from './clamp'\n\nconst mapObject = <T>(o: { [key: string]: T }, f: (value: T) => T): { [key: string]: T } =>\n    Object.assign({}, ...Object.keys(o).map(k => ({ [k]: f(o[k]) })))\n\n// ID for a specific modal.\nexport type ModalID = string\n\n// State for a specific modal.\nexport interface ModalState {\n    x: number\n    y: number\n    width: number\n    height: number\n    zIndex: number\n    open: boolean\n}\n\n// State of all modals.\nexport interface ModalsState {\n    maxZIndex: number\n    windowSize: {\n        width: number\n        height: number\n    }\n    modals: {\n        [key: string]: ModalState\n    }\n}\n\nexport const initialModalsState: ModalsState = {\n    maxZIndex: 0,\n    windowSize: getWindowSize(),\n    modals: {},\n}\n\nexport const initialModalState: ModalState = {\n    x: 0,\n    y: 0,\n    width: 800,\n    height: 800,\n    zIndex: 0,\n    open: false,\n}\n\nconst getInitialModalState = ({\n    initialWidth = initialModalState.width,\n    initialHeight = initialModalState.height,\n}: {\n    initialWidth?: number\n    initialHeight?: number\n}) => {\n    return {\n        ...initialModalState,\n        width: initialWidth,\n        height: initialHeight,\n    }\n}\n\nexport type Action =\n    | { type: 'show'; id: ModalID }\n    | { type: 'hide'; id: ModalID }\n    | { type: 'focus'; id: ModalID }\n    | { type: 'unmount'; id: ModalID }\n    | { type: 'mount'; id: ModalID; intialState: { initialWidth?: number; initialHeight?: number } }\n    | { type: 'windowResize'; size: { width: number; height: number } }\n    | { type: 'drag'; id: ModalID; x: number; y: number }\n    | {\n          type: 'resize'\n          id: ModalID\n          x: number\n          y: number\n          width: number\n          height: number\n      }\n\nexport const getModalState = ({\n    state,\n    id,\n    initialWidth,\n    initialHeight,\n}: {\n    state: ModalsState\n    id: ModalID\n    initialWidth?: number\n    initialHeight?: number\n}): ModalState => state.modals[id] || getInitialModalState({ initialWidth, initialHeight })\n\nconst getNextZIndex = (state: ModalsState, id: string): number =>\n    getModalState({ state, id }).zIndex === state.maxZIndex ? state.maxZIndex : state.maxZIndex + 1\n\nconst clampDrag = (\n    windowWidth: number,\n    windowHeight: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n): { x: number; y: number } => {\n    const maxX = windowWidth - width\n    const maxY = windowHeight - height\n    const clampedX = clamp(0, maxX, x)\n    const clampedY = clamp(0, maxY, y)\n    return { x: clampedX, y: clampedY }\n}\n\nconst clampResize = (\n    windowWidth: number,\n    windowHeight: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n): { width: number; height: number } => {\n    const maxWidth = windowWidth - x\n    const maxHeight = windowHeight - y\n    const clampedWidth = clamp(200, maxWidth, width)\n    const clampedHeight = clamp(200, maxHeight, height)\n    return { width: clampedWidth, height: clampedHeight }\n}\n\nexport const draggableModalReducer = (state: ModalsState, action: Action): ModalsState => {\n    switch (action.type) {\n        case 'resize':\n            const size = clampResize(\n                state.windowSize.width,\n                state.windowSize.height,\n                action.x,\n                action.y,\n                action.width,\n                action.height,\n            )\n            return {\n                ...state,\n                maxZIndex: getNextZIndex(state, action.id),\n                modals: {\n                    ...state.modals,\n                    [action.id]: {\n                        ...state.modals[action.id],\n                        ...size,\n                        zIndex: getNextZIndex(state, action.id),\n                    },\n                },\n            }\n        case 'drag':\n            return {\n                ...state,\n                maxZIndex: getNextZIndex(state, action.id),\n                modals: {\n                    ...state.modals,\n                    [action.id]: {\n                        ...state.modals[action.id],\n                        ...clampDrag(\n                            state.windowSize.width,\n                            state.windowSize.height,\n                            action.x,\n                            action.y,\n                            state.modals[action.id].width,\n                            state.modals[action.id].height,\n                        ),\n                        zIndex: getNextZIndex(state, action.id),\n                    },\n                },\n            }\n        case 'show': {\n            const modalState = state.modals[action.id]\n            const centerX = state.windowSize.width / 2 - modalState.width / 2\n            const centerY = state.windowSize.height / 2 - modalState.height / 2\n            const position = clampDrag(\n                state.windowSize.width,\n                state.windowSize.height,\n                centerX,\n                centerY,\n                modalState.width,\n                modalState.height,\n            )\n            const size = clampResize(\n                state.windowSize.width,\n                state.windowSize.height,\n                position.x,\n                position.y,\n                modalState.width,\n                modalState.height,\n            )\n            return {\n                ...state,\n                maxZIndex: state.maxZIndex + 1,\n                modals: {\n                    ...state.modals,\n                    [action.id]: {\n                        ...modalState,\n                        ...position,\n                        ...size,\n                        zIndex: state.maxZIndex + 1,\n                        open: true,\n                    },\n                },\n            }\n        }\n        case 'focus':\n            const modalState = state.modals[action.id]\n            return {\n                ...state,\n                maxZIndex: state.maxZIndex + 1,\n                modals: {\n                    ...state.modals,\n                    [action.id]: {\n                        ...modalState,\n                        zIndex: state.maxZIndex + 1,\n                    },\n                },\n            }\n        case 'hide': {\n            const modalState = state.modals[action.id]\n            return {\n                ...state,\n                modals: {\n                    ...state.modals,\n                    [action.id]: {\n                        ...modalState,\n                        open: false,\n                    },\n                },\n            }\n        }\n        case 'mount':\n            const initialState = getInitialModalState(action.intialState)\n            return {\n                ...state,\n                maxZIndex: state.maxZIndex + 1,\n                modals: {\n                    ...state.modals,\n                    [action.id]: {\n                        ...initialState,\n                        x: state.windowSize.width / 2 - initialState.width / 2,\n                        y: state.windowSize.height / 2 - initialState.height / 2,\n                        zIndex: state.maxZIndex + 1,\n                    },\n                },\n            }\n        case 'unmount':\n            const modalsClone = { ...state.modals }\n            delete modalsClone[action.id]\n            return {\n                ...state,\n                modals: modalsClone,\n            }\n        case 'windowResize':\n            return {\n                ...state,\n                windowSize: action.size,\n                modals: mapObject(state.modals, (modalState: ModalState) => {\n                    if (!modalState.open) {\n                        return modalState\n                    }\n                    const position = clampDrag(\n                        state.windowSize.width,\n                        state.windowSize.height,\n                        modalState.x,\n                        modalState.y,\n                        modalState.width,\n                        modalState.height,\n                    )\n                    const size = clampResize(\n                        state.windowSize.width,\n                        state.windowSize.height,\n                        position.x,\n                        position.y,\n                        modalState.width,\n                        modalState.height,\n                    )\n                    return {\n                        ...modalState,\n                        ...position,\n                        ...size,\n                    }\n                }),\n            }\n        default:\n            throw new Error()\n    }\n}\n","import * as React from 'react'\nimport { FunctionComponent, ReactElement, useContext } from 'react'\nimport { useUID } from 'react-uid'\nimport { DraggableModalContext } from './DraggableModalContext'\nimport { DraggableModalInner } from './DraggableModalInner'\nimport { getModalState } from './draggableModalReducer'\nimport { ModalProps } from 'antd/lib/modal'\n\nexport interface DraggableModalProps extends ModalProps {\n    initialWidth?: number\n    initialHeight?: number\n}\n\nexport const DraggableModal: FunctionComponent<DraggableModalProps> = (\n    props: DraggableModalProps,\n): ReactElement => {\n    // Get the unique ID of this modal.\n    const id = useUID()\n\n    // Get modal provider.\n    const modalProvider = useContext(DraggableModalContext)\n    if (!modalProvider) {\n        throw new Error('No Provider')\n    }\n\n    const { dispatch, state } = modalProvider\n    const modalState = getModalState({\n        state,\n        id,\n        initialHeight: props.initialHeight,\n        initialWidth: props.initialWidth,\n    })\n\n    // We do this so that we don't re-render all modals for every state change.\n    // DraggableModalInner uses React.memo, so it only re-renders if\n    // if props change (e.g. modalState).\n    return <DraggableModalInner id={id} dispatch={dispatch} modalState={modalState} {...props} />\n}\n","import * as React from 'react'\nimport { useEffect, useReducer } from 'react'\nimport { DraggableModalContext } from './DraggableModalContext'\nimport { getWindowSize } from './getWindowSize'\nimport { draggableModalReducer, initialModalsState } from './draggableModalReducer'\n\nexport const DraggableModalProvider = ({\n    children,\n}: {\n    children: React.ReactNode\n}): React.ReactElement => {\n    const [state, dispatch] = useReducer(draggableModalReducer, initialModalsState)\n\n    useEffect(() => {\n        if (typeof window !== 'object') {\n            return\n        }\n        const onResize = (): void => dispatch({ type: 'windowResize', size: getWindowSize() })\n        window.addEventListener('resize', onResize)\n        onResize()\n        return () => window.removeEventListener('resize', onResize)\n    }, [dispatch])\n\n    return (\n        <DraggableModalContext.Provider\n            value={{\n                state,\n                dispatch,\n            }}\n        >\n            {children}\n        </DraggableModalContext.Provider>\n    )\n}\n"],"names":["DraggableModalContext","React","ResizeHandle","props","className","modalStyle","margin","paddingBottom","pointerEvents","DraggableModalInnerNonMemo","id","modalState","dispatch","open","children","title","initialWidth","initialHeight","otherProps","useEffect","type","intialState","value","ref","openPrevious","useRef","current","zIndex","x","y","width","height","style","useMemo","top","left","onFocus","useCallback","onDragWithID","args","onResizeWithID","onMouseDrag","onDrag","useState","dragging","setDragging","initX","initY","mouseDownX","mouseDownY","initialDragState","setInitialDragState","onMouseDown","e","preventDefault","clientX","clientY","onMouseMove","window","addEventListener","passive","removeEventListener","onMouseUp","useDrag","onMouseResize","onResize","initWidth","initHeight","useResize","titleElement","onClick","Modal","wrapClassName","destroyOnClose","mask","maskClosable","DraggableModalInner","memo","getWindowSize","innerWidth","innerHeight","clamp","min","max","Math","initialModalsState","maxZIndex","windowSize","modals","initialModalState","getInitialModalState","getModalState","state","getNextZIndex","clampDrag","windowWidth","windowHeight","maxY","clampResize","maxHeight","draggableModalReducer","action","o","f","size","position","initialState","modalsClone","Object","assign","keys","map","k","Error","useUID","modalProvider","useContext","useReducer","Provider"],"mappings":"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"}